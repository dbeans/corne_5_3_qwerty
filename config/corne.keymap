/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&nice_view_spi { cs-gpios = <&pro_micro 8 GPIO_ACTIVE_HIGH>; };

&led_strip { chain-length = <27>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_acute_n {
            timeout-ms = <300>; // Límite de tiempo para la secuencia
            key-positions = <22 30>; // ACUTE en pos 22, N en pos 30
            bindings = <&n_tilde>;   // Dispara macro ñ
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp ESC>;
        };

        compatible = "zmk,combos";

        combo_tab {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp TAB>;
        };

        compatible = "zmk,combos";

        combo_arr {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp RA(N2)>;
        };

        compatible = "zmk,combos";

        combo_BSPC1 {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp LC(BSPC)>;
        };

        compatible = "zmk,combos";

        combo_BSPC2 {
            timeout-ms = <50>;
            key-positions = <9 10>;
            bindings = <&kp BSPC>;
        };

        compatible = "zmk,combos";

        combo_num {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&tog 1>;
        };

        compatible = "zmk,combos";

        screen_toggle_reverse {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LA(LS(TAB))>;
        };

        compatible = "zmk,combos";

        combo_ene2 {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp SEMI>;
        };

        compatible = "zmk,combos";

        combo_suspende {
            timeout-ms = <50>;
            key-positions = <14 15 16>;
            bindings = <&win_sleep>;
        };

        compatible = "zmk,combos";

        combo_blqmayus {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp CLCK>;
        };

        compatible = "zmk,combos";

        combo_ctrolz {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp LC(Z)>;
        };

        screen_toggle {
            bindings = <&kp LA(TAB)>;
            key-positions = <15 14>;
        };
    };
};

/ {
    behaviors {
        bt0_rgb: behavior_bt0_rgb {
            compatible = "zmk,behavior-macro";
            label = "BT0_RGB";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &rgb_ug RGB_COLOR_HSB(300,100,5)>;
        };

        bt1_rgb: behavior_bt1_rgb {
            compatible = "zmk,behavior-macro";
            label = "BT1_RGB";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &rgb_ug RGB_COLOR_HSB(180,100,5)>;
        };

        bt2_rgb: behavior_bt2_rgb {
            compatible = "zmk,behavior-macro";
            label = "BT2_RGB";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &rgb_ug RGB_COLOR_HSB(0,100,5)>;
        };

        bt3_rgb: behavior_bt3_rgb {
            compatible = "zmk,behavior-macro";
            label = "BT3_RGB";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &rgb_ug RGB_COLOR_HSB(120,100,5)>;
        };

        bt4_rgb: behavior_bt4_rgb {
            compatible = "zmk,behavior-macro";
            label = "BT4_RGB";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &rgb_ug RGB_COLOR_HSB(45,100,5)>;
        };

        win_sleep: win_sleep {
            wait-ms = <500>;
            tap-ms = <5>;
            compatible = "zmk,behavior-macro";
            label = "WIN_SLEEP_KEY";
            #binding-cells = <0>;
            bindings = <&kp LG(X) &kp G &kp S>;
        };

        n_tilde: n_tilde {
            compatible = "zmk,behavior-macro";
            label = "ñ Macro";
            #binding-cells = <0>;
            bindings = <&kp SEMI>; // Unicode para ñ
        };

        double_ESC: double_ESC {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_ESC";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp ESC>;
        };

        pycharm_debug_run: pycharm_debug_run {
            compatible = "zmk,behavior-tap-dance";
            label = "PYCHARM_DEBUG_RUN";
            #binding-cells = <0>;
            bindings = <&kp R>, <&kp R>, <&kp LS(F10)>;
        };

        pycharm_debug: pycharm_debug {
            compatible = "zmk,behavior-tap-dance";
            label = "PYCHARM_DEBUG";
            #binding-cells = <0>;
            bindings = <&kp D>, <&kp D>, <&kp LS(F9)>;
        };
    };
};

/ {
    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |   0  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |  10 | 11 |
            // |  12  | 13  | 14  | 15  |  16 |  17 |   | 18  |  19  |  20 |  21 | 22  | 23 |
            // |  24  | 25  | 26  | 27  |  28 |  29 |   | 30  |  31  |  32 |  33 | 34  | 35 |
            //                    | 36  | 37  | 38  |   | 39  |  40  |  41 |
            // -----------------------------------------------------------------------------------------
            // |      |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |    |
            // |      |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  | ´   |    |
            // |      |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  | SHFT |    |
            //         SHFT         | SHFT| LWR | CTRL |   | SPAC | RSE  | ALT |
            //  0

            bindings = <
&none  &kp Q        &mt LEFT_WIN W  &kp E       &kp R        &kp T        &kp Y        &kp U           &kp I         &kp O    &kp P      &none
&none  &kp A        &kp S           &kp D       &kp F        &kp G        &kp H        &kp J           &kp K         &kp L    &kp SQT    &none
&none  &mt LSHFT Z  &kp X           &kp C       &kp V        &kp B        &kp N        &kp M           &kp COMMA     &kp DOT  &kp RSHFT  &none
                                    &lt 6 LGUI  &lt 3 SPACE  &lt 5 RET    &lt 4 SPACE  &mt RCTRL BSPC  &mt RALT DEL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |      | \ |  (  |  )  |  %  |  "  |   |  ,  |  7  |  8  |  9  | BKSP|      |
            // |      | * |  +  |  -  |  &  |  '  |   |  .  |  4  |  5  |  6  |  /  |      |
            // |      | z |  >  |  _  |  $  |  @  |   |  0  |  1  |  2  |  3  |  =  |      |
            //                    |     |     |CTRL |   | ENT |     | ALT |
            // 1

            bindings = <
&trans  &kp RA(GRAVE)    &kp LS(N8)           &kp LS(N9)    &kp LS(N5)  &kp AT       &kp COMMA  &kp N7  &kp N8  &kp N9  &kp KP_DIVIDE    &trans
&trans  &kp KP_ASTERISK  &kp KP_PLUS          &kp KP_MINUS  &kp LS(N6)  &kp MINUS    &kp DOT    &kp N4  &kp N5  &kp N6  &kp KP_ASTERISK  &trans
&trans  &kp NON_US_BSLH  &kp LS(NON_US_BSLH)  &kp LS(FSLH)  &kp RA(N2)  &kp DLLR     &kp N0     &kp N1  &kp N2  &kp N3  &kp RPAR         &trans
                                              &trans        &trans      &trans       &trans     &trans  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |     |     |    |     |     |  ª  |     | [  |  ]  |  {   |  }    | PSCR  |    |
            // |     |     |    |     |     |  º  |     | ¿  |  ?  |  #   |  UP   |       |    |
            // |     |     |    |     |  #  |  ~  |     |  ¡ |  !  | LEFT | DOWN  | RIGHT |    |
            //             |    |     |     |     |     |    | ALT |
            // 2

            bindings = <
&none  &none  &none  &none     &none       &kp LS(GRAVE)    &kp RA(LBKT)  &kp RA(RBKT)   &kp RA(SQT)  &kp RA(BSLH)  &kp PSCRN  &none
&none  &none  &none  &none     &none       &kp GRAVE        &kp PLUS      &kp LS(MINUS)  &kp RA(N1)   &kp UP        &kp SEMI   &none
&none  &none  &none  &kp BSLH  &kp RA(N3)  &kp RA(N4)       &kp EQUAL     &kp EXCL       &kp LEFT     &kp DOWN      &kp RIGHT  &none
                     &trans    &trans      &trans           &trans        &trans         &trans
            >;
        };

        rgb_layer {
            // -----------------------------------------------------------------------------------------
            // | F1  | Tono+ |  Satura+ | Brillo+ |    |      |     |   |  F7  |  F8  |  F9  | F10  |    |
            // | F7  | Tono- |  Satura- | Brillo- |    |      |     |   |  F4  |  F5  |  F6  | F11  |    |
            // |     | BT1   |   BT2    | BT3     |BT4  | BT5 |     | ñ |  F1  |  F2  |  F3  | F12  |    |
            //                          |BTCLR    |     |     |     |   |      |      |
            // 3

            bindings = <
&none  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_COLOR_HSB(180,100,5)    &rgb_ug RGB_COLOR_HSB(69,95,49)  &kp F7  &kp F8  &kp F9  &kp F10  &none
&none  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_COLOR_HSB(300,100,5)    &rgb_ug RGB_COLOR_HSB(60,1,28)   &kp F4  &kp F5  &kp F6  &kp F11  &none
&none  &bt0_rgb         &bt1_rgb         &bt2_rgb         &bt3_rgb         &bt4_rgb                            &kp SEMI                         &kp F1  &kp F2  &kp F3  &kp F13  &none
                                         &bt BT_CLR       &trans           &rgb_ug RGB_TOG                     &trans                           &trans  &trans
            >;
        };

        new_numerical {
            bindings = <
&trans  &kp N1           &kp N2    &kp N3     &kp N4     &kp N5    &kp N6        &kp N7  &kp N8  &kp N9  &kp N0     &trans
&trans  &kp EXCLAMATION  &kp PLUS  &kp MINUS  &kp EQUAL  &trans    &kp PLUS      &kp N3  &kp N4  &kp N5  &kp MINUS  &trans
&trans  &trans           &trans    &trans     &trans     &trans    &kp ASTERISK  &kp N1  &kp N2  &kp N3  &kp SLASH  &trans
                                   &trans     &trans     &trans    &trans        &trans  &trans
            >;
        };

        new_symbol {
            bindings = <
&none   &kp BACKSLASH  &kp AT            &trans             &kp DOLLAR  &kp PERCENT    &kp AMPERSAND   &kp RIGHT_BRACKET      &kp LEFT_BRACKET      &trans     &kp PIPE  &trans
&none   &kp AT_SIGN    &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp HASH    &trans         &kp MINUS       &kp RIGHT_PARENTHESIS  &kp LEFT_PARENTHESIS  &kp SLASH  &trans    &trans
&trans  &trans         &trans            &trans             &trans      &trans         &kp UNDERSCORE  &kp RIGHT_BRACE        &kp RIGHT_BRACE       &trans     &trans    &trans
                                         &trans             &trans      &trans         &trans          &trans                 &trans
            >;
        };

        navigation {
            bindings = <
&trans  &msc SCRL_UP    &trans          &mmv MOVE_UP    &trans           &trans    &trans     &trans          &kp UP_ARROW    &kp PAGE_UP      &trans   &trans
&trans  &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans    &mkp LCLK  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp END  &trans
&trans  &kp LSHFT       &trans          &trans          &trans           &trans    &mkp RCLK  &kp HOME        &trans          &kp PAGE_DOWN    &trans   &trans
                                        &trans          &trans           &trans    &trans     &trans          &trans
            >;
        };

    };
};
